@startuml

!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml


System_Boundary(dataGovernanceContainer, "Модуль управления данными и политиками конфиденциальности") {

    Container(dataTaggingService, "Служба тегирования данных", "Java/Spring Boot", "Автоматически присваивает теги (PII, SPD, HealthData и т.д.) записям или полям данных на основе правил или содержимого.")
    Container(policyEngine, "Движок политик (Policy Engine)", "Java/OPA", "Интерпретирует политики конфиденциальности, определяет, разрешен ли доступ к данным для конкретного субъекта.")
    Container(pep, "Точка принудительного применения политик (PEP)", "Java/Spring Interceptor", "Перехватывает запросы к данным/API, консультируется с Policy Engine для проверки разрешений.")
    Container(dataLifecycleService, "Служба управления жизн. циклом данных", "Java/Spring Boot", "Обрабатывает запросы на удаление данных (Right to be Forgotten), управляет сроками хранения.")
    Container(policyApi, "API управления политиками", "REST/JSON", "Интерфейс для администраторов для создания, изменения и удаления политик конфиденциальности.")
    Container(taggingApi, "API тегирования", "REST/JSON", "Интерфейс для других сервисов для запроса тегов или ручного тегирования.")
}

System_Boundary(DataLakeSystem, "Модуль сбора необработанных данных") {

    Container(DataLake, "Озеро данных", "Java/Spring Boot/HDFS", "Сбор и хранение неоработанных данных")
    Container(Kafka, "Очередь для сбора данных перед передачей в озероданных", "Kafka", "Интерпретирует политики конфиденциальности, определяет, разрешен ли доступ к данным для конкретного субъекта.")
}


System_Ext(iamSystem, "Модуль IAM", "Система аутентификации и авторизации.")
System_Ext(databaseSystem, "База данных", "Хранилище данных пациентов, политик, тегов.")
System_Ext(loggingSystem, "Модуль аудита", "Сбор и хранение логов доступа.")
System_Ext(systemServices, "Сервисы системы (объеденены на схеме, чтобы не детализировать)", "Отвечают за все процессы в Медикаменте")


Rel(pep, policyEngine, "Проверяет разрешения (запрос)")
Rel(policyEngine, databaseSystem, "Читает политики и теги данных")
Rel(dataTaggingService, databaseSystem, "Читает правила, записывает теги")
Rel(dataLifecycleService, databaseSystem, "Удаляет/обновляет данные")
Rel(policyApi, dataLifecycleService, "Запрашивает удаление данных")
Rel(policyApi, databaseSystem, "Управляет политиками в БД")
Rel(taggingApi, dataTaggingService, "Запрашивает/устанавливает теги")


Rel(dataTaggingService, loggingSystem, "Логирует тегирование")
Rel(policyEngine, loggingSystem, "Логирует решения")
Rel(pep, loggingSystem, "Логирует попытки доступа")
Rel(dataLifecycleService, loggingSystem, "Логирует удаления")
Rel(Kafka, DataLake, "Передает необработанные данные")
Rel(systemServices, Kafka, "Передача данных в озеро данных")


Rel_Neighbor(pep, iamSystem, "Проверяет токен/роль пользователя")
Rel_Neighbor(policyApi, iamSystem, "Аутентифицирует администратора")
Rel_Neighbor(taggingApi, iamSystem, "Аутентифицирует сервис")


title Контейнеры "Модуль управления данными и политиками конфиденциальности + система хранения необработанных данных" (C4 container)


note right of dataGovernanceContainer
  Эта система реализует ключевые аспекты Privacy by Design:
  - Автоматическое управление тегами данных.
  - Централизованное хранение и применение политик.
  - Принудительная проверка доступа на уровне API.
  - Обработка запросов на удаление данных.
end note

note right of DataLakeSystem
  Эта система реализует сбор данных в озере данных:
  - Получение необработанных данных из разных систем через кафку.
  - Хранение необработанных данных в распределенной файловой системе.
end note

@enduml